/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vista;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author airto
 */
public class vistaContorno extends javax.swing.JFrame {

    private BufferedImage originalImage; // Almacena la imagen original
    private BufferedImage editedImage;
    /**
     * Creates new form vistaContorno
     */
    public vistaContorno() {
        initComponents();
        initListeners(); // Inicializa los listeners
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAgregarImagen = new javax.swing.JButton();
        btnContorno = new javax.swing.JButton();
        lblImagen = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnAgregarImagen.setText("Agregar Imagen");

        btnContorno.setText("Contorno");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblImagen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnContorno, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnAgregarImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblImagen, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnContorno)
                    .addComponent(btnAgregarImagen))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(vistaContorno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(vistaContorno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(vistaContorno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(vistaContorno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new vistaContorno().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarImagen;
    private javax.swing.JButton btnContorno;
    private javax.swing.JLabel lblImagen;
    // End of variables declaration//GEN-END:variables

 public void setImageIcon(ImageIcon imageIcon) {
    // Muestra la imagen dada en el JLabel lblImagen.
    lblImagen.setIcon(imageIcon);
    lblImagen.setText(""); // Elimina cualquier texto previo en el JLabel.
}

public Color showColorChooser() {
    // Muestra un selector de color para que el usuario elija un color para los labios.
    return JColorChooser.showDialog(this, "Elige un color para los labios", Color.RED);
}

public void showMessage(String primero_carga_una_imagen) {
    // Muestra un mensaje emergente (JOptionPane) con el texto dado.
    JOptionPane.showMessageDialog(this, "Primero, carga una imagen");
}

public JButton getLoadButton() {
    // Retorna el botón para agregar una imagen.
    return btnAgregarImagen;
}

public JButton getColorButton() {
    // Retorna el botón para aplicar contorno o color.
    return btnContorno;
}

private void initListeners() {
    // Añade la acción de cargar imagen al botón btnAgregarImagen.
    btnAgregarImagen.addActionListener(e -> {
        JFileChooser fileChooser = new JFileChooser(); // Abre explorador de archivos.
        int returnValue = fileChooser.showOpenDialog(vistaContorno.this);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            // Si el usuario selecciona un archivo:
            File selectedFile = fileChooser.getSelectedFile();
            try {
                originalImage = ImageIO.read(selectedFile); // Carga la imagen seleccionada.
                setImageIcon(new ImageIcon(originalImage)); // Muestra la imagen cargada en lblImagen.
                
                // Habilita los botones para aplicar el contorno o color después de cargar una imagen.
                btnAgregarImagen.setEnabled(true);
                btnContorno.setEnabled(true);
            } catch (Exception ex) {
                showMessage("Error al cargar la imagen: " + ex.getMessage());
            }
        } else {
            showMessage("No se seleccionó ninguna imagen.");
        }
    });

    // Añade la acción de aplicar color o contorno al botón btnContorno.
    btnContorno.addActionListener(e -> {
        if (originalImage == null) {
            // Si no hay imagen cargada, muestra un mensaje.
            showMessage("Primero, carga una imagen");
            return;
        }

        Color color = showColorChooser(); // Muestra el selector de color.
        if (color != null) {
            // Si se selecciona un color, aplica el contorno a la imagen.
            editedImage = applyContour(originalImage, color);
            setImageIcon(new ImageIcon(editedImage)); // Muestra la imagen editada.
            
            // Reactiva los botones después de aplicar el contorno.
            btnAgregarImagen.setEnabled(true);
            btnContorno.setEnabled(true);
        } else {
            showMessage("No se seleccionó ningún color.");
        }
    });
}

private BufferedImage applyContour(BufferedImage original, Color lipColor) {
    // Aplica un contorno a la imagen usando el color dado.
    int width = original.getWidth();
    int height = original.getHeight();
    BufferedImage contourImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);

    // Define un kernel de detección de bordes para identificar áreas a colorear.
    int[][] kernel = {
        {-1, -1, -1},
        {-1,  8, -1},
        {-1, -1, -1}
    };

    // Umbral para identificar un borde.
    int threshold = 50; // Ajusta este valor para un efecto más o menos intenso.

    for (int y = 1; y < height - 1; y++) {
        for (int x = 1; x < width - 1; x++) {
            // Aplica el kernel sobre un área de 3x3 alrededor del píxel.
            int sum = 0;
            for (int ky = -1; ky <= 1; ky++) {
                for (int kx = -1; kx <= 1; kx++) {
                    Color neighborColor = new Color(original.getRGB(x + kx, y + ky));
                    int brightness = (int)(0.299 * neighborColor.getRed() + 0.587 * neighborColor.getGreen() + 0.114 * neighborColor.getBlue());
                    sum += brightness * kernel[ky + 1][kx + 1]; // Aplica el valor del kernel al brillo del píxel vecino.
                }
            }

            // Si el valor calculado es mayor que el umbral, se considera un borde.
            if (sum > threshold) {
                // Define un área específica de la imagen para aplicar el color de labios.
                if (y > height * 3 / 4 && y < height * 7 / 8 && (x > width / 4 && x < (3 * width) / 4)) {
                    // Aplica el color de labios a una región alrededor del borde detectado.
                    for (int dy = -2; dy <= 2; dy++) {
                        for (int dx = -2; dx <= 2; dx++) {
                            if (Math.abs(dx) + Math.abs(dy) <= 2) {
                                int newX = x + dx;
                                int newY = y + dy;
                                if (newX >= 0 && newX < width && newY >= 0 && newY < height) {
                                    contourImage.setRGB(newX, newY, lipColor.getRGB());
                                }
                            }
                        }
                    }
                } else {
                    contourImage.setRGB(x, y, original.getRGB(x, y)); // Mantiene el color original en otras áreas.
                }
            } else {
                contourImage.setRGB(x, y, original.getRGB(x, y)); // Mantiene el color original si no es borde.
            }
        }
    }
    return contourImage; // Retorna la imagen con el contorno aplicado.
}

}


