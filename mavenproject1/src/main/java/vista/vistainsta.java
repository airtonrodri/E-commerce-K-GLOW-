/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vista;

import controlador.instagramc;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import modelo.instagramm;

/**
 *
 * @author airto
 */
public class vistainsta extends javax.swing.JFrame {

    /**
     * Creates new form vistainsta
     */
    public vistainsta() {
        initComponents();
        btnAgregarImagen.addActionListener(e -> agregarImagen());
        instagramm modelo = new instagramm();
        instagramc controlador = new instagramc(modelo, this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAgregarImagen = new javax.swing.JButton();
        btnGris = new javax.swing.JButton();
        lblImagen = new javax.swing.JLabel();
        btnInvertir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnAgregarImagen.setText("Agregar Imagen");

        btnGris.setText("Escala de grises");

        btnInvertir.setText("Invertir");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblImagen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAgregarImagen)
                        .addGap(18, 18, 18)
                        .addComponent(btnGris, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnInvertir, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgregarImagen)
                    .addComponent(btnGris)
                    .addComponent(btnInvertir))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblImagen, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(vistainsta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(vistainsta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(vistainsta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(vistainsta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new vistainsta().setVisible(true);
            }
        });
    }

private void agregarImagen() {
    // Crea un nuevo JFileChooser para seleccionar archivos
    JFileChooser fileChooser = new JFileChooser();
    // Filtro para solo mostrar imágenes en el diálogo
    FileNameExtensionFilter filter = new FileNameExtensionFilter("Imágenes", "jpg", "jpeg", "png", "gif");
    fileChooser.setFileFilter(filter); // Aplica el filtro al JFileChooser

    // Muestra el diálogo para seleccionar un archivo
    int returnValue = fileChooser.showOpenDialog(this);
    if (returnValue == JFileChooser.APPROVE_OPTION) {
        // Obtiene el archivo seleccionado por el usuario
        File selectedFile = fileChooser.getSelectedFile();
        try {
            // Carga la imagen desde el archivo seleccionado
            Image image = ImageIO.read(selectedFile);
            // Escala la imagen para que se ajuste al JLabel
            Image scaledImage = image.getScaledInstance(lblImagen.getWidth(), lblImagen.getHeight(), Image.SCALE_SMOOTH);
            // Establece la imagen escalada en el JLabel
            lblImagen.setIcon(new ImageIcon(scaledImage));
        } catch (Exception ex) {
            ex.printStackTrace(); // Imprime la excepción en caso de error
        }
    }
}

public void mostrarImagen(BufferedImage imagen) {
    if (imagen != null) {
        // Escalar la imagen para que se ajuste al JLabel
        Image scaledImage = imagen.getScaledInstance(lblImagen.getWidth(), lblImagen.getHeight(), Image.SCALE_SMOOTH);
        // Establecer la imagen escalada en el JLabel
        lblImagen.setIcon(new ImageIcon(scaledImage));
    }
}

public void actualizarImagen(BufferedImage imagen) {
    if (imagen != null) {
        // Escala la nueva imagen para que se ajuste al JLabel
        Image scaledImage = imagen.getScaledInstance(lblImagen.getWidth(), lblImagen.getHeight(), Image.SCALE_SMOOTH);
        // Actualiza el JLabel con la nueva imagen escalada
        lblImagen.setIcon(new ImageIcon(scaledImage));
    }
}



// Método para obtener el botón de agregar imagen
public javax.swing.JButton getBtnAgregarImagen() {
    return btnAgregarImagen; // Devuelve el botón para agregar una imagen
}

// Método para obtener el botón de aumentar brillo
public javax.swing.JButton getBtnAumentarBrillo() {
    return btnGris; // Devuelve el botón para aumentar brillo (nombre puede ser confuso)
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarImagen;
    private javax.swing.JButton btnGris;
    private javax.swing.JButton btnInvertir;
    private javax.swing.JLabel lblImagen;
    // End of variables declaration//GEN-END:variables
}
